// <auto-generated />
using System;
using FA.JustBlog.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FA.JustBlog.DataAccess.Migrations
{
    [DbContext(typeof(JustBlogContext))]
    [Migration("20211206123745_InitialApp")]
    partial class InitialApp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FA.JustBlog.Models.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("b20c815f-5f83-449d-9102-c74b4f11db6b"),
                            Description = "All products relate to Food or Drinks",
                            InsertAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Food or Drinks",
                            UpdateAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty"
                        },
                        new
                        {
                            CategoryId = new Guid("ff85e290-573f-477b-bc75-3afef7acb469"),
                            Description = "All posts relate to .Net or other.",
                            InsertAt = new DateTime(2021, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Technololy",
                            UpdateAt = new DateTime(2021, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = new Guid("a39a34ab-67d0-4c76-9075-238da9cb3fde"),
                            CommentHeader = "For comments",
                            CommentText = "hahaha good",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cáo ẩn danh",
                            PostId = new Guid("fa680590-599c-4b70-a3ed-3dc42f0a79c6"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CommentId = new Guid("e704b5a7-9609-4d59-80c5-65578c9ed19a"),
                            CommentHeader = "For comments",
                            CommentText = "Very good",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Thỏ mũm mĩm",
                            PostId = new Guid("b11d633c-6c67-47aa-8ff5-36f219473a73"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CommentId = new Guid("dcff144c-4ce2-4a4d-bba8-139790c9fb5b"),
                            CommentHeader = "For comments",
                            CommentText = "Excellent !",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cá sấu hoa cà",
                            PostId = new Guid("6c6f1427-8e1c-4a5a-a53c-5ea5d040e080"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CommentId = new Guid("afa431cd-f436-4d4b-93a3-6a8d7a596223"),
                            CommentHeader = "For comments",
                            CommentText = "5 stars",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Chuột chũi đại dương",
                            PostId = new Guid("2da4df58-d2b8-4442-97c1-6b43e6bb520d"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CommentId = new Guid("5d79493f-41a3-4c6f-bba4-d457b1a20696"),
                            CommentHeader = "For comments",
                            CommentText = "Yo Yo",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cá mập biển sâu",
                            PostId = new Guid("96d1d69d-613a-484d-9f31-aac1a65c17d5"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CommentId = new Guid("cab6fb6b-d118-47b2-b862-e06a41c66ab4"),
                            CommentHeader = "For comments",
                            CommentText = "Hảo sản phẩm",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Sóc nâu",
                            PostId = new Guid("fa680590-599c-4b70-a3ed-3dc42f0a79c6"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CommentId = new Guid("d02d4926-3ad8-47dd-b77c-714c86ab613a"),
                            CommentHeader = "For comments",
                            CommentText = "Ngon !",
                            CommentTime = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mous@example.com",
                            InsertAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Mèo mướp ẩn danh",
                            PostId = new Guid("fa680590-599c-4b70-a3ed-3dc42f0a79c6"),
                            UpdateAt = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("RateCount")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Totalrate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("fa680590-599c-4b70-a3ed-3dc42f0a79c6"),
                            CategoryId = new Guid("b20c815f-5f83-449d-9102-c74b4f11db6b"),
                            ImageUrl = "https://th.bing.com/th/id/OIP.IrCcZG0OwJUJ_6a1mhQHqwHaFZ?pid=ImgDet&rs=1",
                            InsertAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostContent = "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?",
                            PublishDate = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 10,
                            ShortDescription = "Tea is the most drink for people.",
                            Title = "Some thing about Tea #Tea",
                            Totalrate = 10,
                            UpdateAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty",
                            ViewCount = 120
                        },
                        new
                        {
                            PostId = new Guid("b11d633c-6c67-47aa-8ff5-36f219473a73"),
                            CategoryId = new Guid("b20c815f-5f83-449d-9102-c74b4f11db6b"),
                            ImageUrl = "https://th.bing.com/th/id/OIP.IrCcZG0OwJUJ_6a1mhQHqwHaFZ?pid=ImgDet&rs=1",
                            InsertAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostContent = "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?",
                            PublishDate = new DateTime(2021, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 10,
                            ShortDescription = "Coffee is the most drink for people.",
                            Title = "Some thing about Coffee #Coffee",
                            Totalrate = 10,
                            UpdateAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty",
                            ViewCount = 120
                        },
                        new
                        {
                            PostId = new Guid("6c6f1427-8e1c-4a5a-a53c-5ea5d040e080"),
                            CategoryId = new Guid("b20c815f-5f83-449d-9102-c74b4f11db6b"),
                            ImageUrl = "https://th.bing.com/th/id/OIP.IrCcZG0OwJUJ_6a1mhQHqwHaFZ?pid=ImgDet&rs=1",
                            InsertAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostContent = "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?",
                            PublishDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 10,
                            ShortDescription = "Milks is the most drink for people.",
                            Title = "Some thing about Milks #Milks",
                            Totalrate = 10,
                            UpdateAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty",
                            ViewCount = 120
                        },
                        new
                        {
                            PostId = new Guid("2da4df58-d2b8-4442-97c1-6b43e6bb520d"),
                            CategoryId = new Guid("b20c815f-5f83-449d-9102-c74b4f11db6b"),
                            ImageUrl = "https://th.bing.com/th/id/OIP.IrCcZG0OwJUJ_6a1mhQHqwHaFZ?pid=ImgDet&rs=1",
                            InsertAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostContent = "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?",
                            PublishDate = new DateTime(2021, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 10,
                            ShortDescription = "Drinks is the most drink for people.",
                            Title = "Some thing about Sting #Drinks",
                            Totalrate = 10,
                            UpdateAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty",
                            ViewCount = 120
                        },
                        new
                        {
                            PostId = new Guid("96d1d69d-613a-484d-9f31-aac1a65c17d5"),
                            CategoryId = new Guid("b20c815f-5f83-449d-9102-c74b4f11db6b"),
                            ImageUrl = "https://th.bing.com/th/id/OIP.IrCcZG0OwJUJ_6a1mhQHqwHaFZ?pid=ImgDet&rs=1",
                            InsertAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostContent = "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid nobis dolore expedita laboriosam aliquam libero natus quas soluta sequi praesentium magni, ratione distinctio amet, aperiam, minima laborum dolorem? Molestiae, minima?",
                            PublishDate = new DateTime(2021, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 7,
                            ShortDescription = "Milks is the most drink for people.",
                            Title = "Some thing about OngTho #Milks",
                            Totalrate = 8,
                            UpdateAt = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty",
                            ViewCount = 5000
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("fa680590-599c-4b70-a3ed-3dc42f0a79c6"),
                            TagId = new Guid("e36b9bab-596c-47da-90ca-99999e8881a2")
                        },
                        new
                        {
                            PostId = new Guid("6c6f1427-8e1c-4a5a-a53c-5ea5d040e080"),
                            TagId = new Guid("27e03338-543d-4c60-9ccc-2f8da894980c")
                        },
                        new
                        {
                            PostId = new Guid("b11d633c-6c67-47aa-8ff5-36f219473a73"),
                            TagId = new Guid("732c6995-d666-4b24-b7ff-5e7538f49975")
                        },
                        new
                        {
                            PostId = new Guid("6c6f1427-8e1c-4a5a-a53c-5ea5d040e080"),
                            TagId = new Guid("87d23734-54ff-43e3-a4e2-2e05a4384af0")
                        },
                        new
                        {
                            PostId = new Guid("2da4df58-d2b8-4442-97c1-6b43e6bb520d"),
                            TagId = new Guid("e36b9bab-596c-47da-90ca-99999e8881a2")
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("e36b9bab-596c-47da-90ca-99999e8881a2"),
                            Count = 10,
                            Description = "All tea will be tag #Teas.",
                            InsertAt = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "#Teas",
                            UpdateAt = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty"
                        },
                        new
                        {
                            TagId = new Guid("27e03338-543d-4c60-9ccc-2f8da894980c"),
                            Count = 11,
                            Description = "All tea will be tag #Coffees.",
                            InsertAt = new DateTime(2021, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "#Coffees",
                            UpdateAt = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty"
                        },
                        new
                        {
                            TagId = new Guid("732c6995-d666-4b24-b7ff-5e7538f49975"),
                            Count = 12,
                            Description = "All tea will be tag #Drinks.",
                            InsertAt = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "#Drinks",
                            UpdateAt = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty"
                        },
                        new
                        {
                            TagId = new Guid("87d23734-54ff-43e3-a4e2-2e05a4384af0"),
                            Count = 15,
                            Description = "All tea will be tag #Milks.",
                            InsertAt = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "#Milks",
                            UpdateAt = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlSlug = "Empty"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlFacebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "590c7a5d-7c2f-485d-f27a-08d9b894db0a",
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "7c881424-62e0-4e52-b0b2-0b9500783a9a",
                            Email = "test@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "TEST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELY90+pWj8esXEfaKBnDxvpflRSfxGtA3ywCXlRREccwMRfM5cB70qbe4quz5biOAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "XSH4GERHMS5GC6F4OQD6P62EO5LQWM33",
                            Sex = false,
                            TwoFactorEnabled = false,
                            UserName = "test@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ED09F0E5-6627-4EE4-94DC-A446B52921B0",
                            ConcurrencyStamp = "012c21f7-c342-4f88-94c3-0af3ef96fe43",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "A7F098E4-D8F9-43EF-BAD6-65034FDEDC45",
                            ConcurrencyStamp = "ed7a5be0-237d-42f6-b0a5-358685275653",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = "B6812DFE-3F6B-4128-90B3-DE050C5FFF46",
                            ConcurrencyStamp = "f0f17ded-80b0-4baf-be41-b0f29699baa4",
                            Name = "Blog Owner",
                            NormalizedName = "BLOG OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "590c7a5d-7c2f-485d-f27a-08d9b894db0a",
                            RoleId = "ED09F0E5-6627-4EE4-94DC-A446B52921B0"
                        },
                        new
                        {
                            UserId = "590c7a5d-7c2f-485d-f27a-08d9b894db0a",
                            RoleId = "A7F098E4-D8F9-43EF-BAD6-65034FDEDC45"
                        },
                        new
                        {
                            UserId = "590c7a5d-7c2f-485d-f27a-08d9b894db0a",
                            RoleId = "B6812DFE-3F6B-4128-90B3-DE050C5FFF46"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Comment", b =>
                {
                    b.HasOne("FA.JustBlog.Models.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Post", b =>
                {
                    b.HasOne("FA.JustBlog.Models.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.PostTag", b =>
                {
                    b.HasOne("FA.JustBlog.Models.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FA.JustBlog.Models.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FA.JustBlog.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FA.JustBlog.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FA.JustBlog.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FA.JustBlog.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("FA.JustBlog.Models.Models.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
